## Capítulo 2: Controle de fluxo

**If/else**

*Sintaxe:*
```R
if (condicao){
  # comandos caso condicao seja verdadeira
} else {
  # comandos caso condicao seja falsa
}
```
ou
```R
if (condicao){
  # comandos caso condicao seja verdadeira
}
```
Dentro do par de parênteses seguidos do **if** tem que ter um objeto do tipo *logical*.

Os comandos dentro do primeiro par de chaves serão executados caso o objeto condicao seja TRUE.

Caso contrário, os comandos de dentro do par de chaves depois do **else** serão executados.

O comando else é opcional, e no caso de o else não aparecer, nada será executado caso o objeto condicao seja FALSE.

Vejamos um primeiro exemplo em que um texto é impresso na tela, o que será impresso depende do valor guardado na variável x.
```R
> x <- 2
> if(x < 5){
  print(paste(x, "e menor que", 5))
} else{
  print(paste(x, "e maior ou igual a", 5))
}
[1] "2 e menor que 5"
```
A função *print()* é responsável por imprimir na tela, e a função paste() por concatenar textos e criar um único objeto do tipo character.

Se a variável x receber um valor maior que 5 o texto impresso é outro.
```R
> x <- 8
> if(x < 5){
  print(paste(x, "e menor que", 5))
} else{
  print(paste(x, "e maior ou igual a", 5))
}
[1] "8 e maior ou igual a 5"
```

Outro exemplo simples:
```R
> x <- 3
> if(x > 2){
  y <- 2*x
} else{
  y <- 3*x
}
> print(y)
[1] 6
```
O controle de fluxo if/else será usado na maioria das vezes dentro de funções, como veremos no próximo capítulo (3).

**for**

*Sintaxe:*
```R
> for(i in valores){
  # comandos que em geral dependem do valor de i
}
```
Dentro do par de parênteses valores, é um vetor de objetos, que pode ser de qualquer tipo.

Os comandos de dentro do par de chaves serão executados, repetidamente, e em cada iteração o objeto **i** vai assumir o valor diferente, valores esses guardados no vetor valores.

O **for** é o primeiro exemplo de um controle de fluxo que executa uma estrutura de repetição, conhecida como laço (*loop*).
```R
> y <- 0
> for(i in 1:10){
  y <- y+1
}
> print(y)
[1] 10
```
Veja que y começa com o valor 0.

Quando i = 1, y é incrementado de 1 unidade e passa a guardar o valor 0 + 1 = 1, e assim por diante até que temos i = 10, quando y recebe seu último incremento e passa a guardar o valor 10.

Outro exemplo:
```R
> x <- 3
> for(var in 2:5){
  x <- x+var
}
> print(x)
[1] 17
```
Veja que x começa guardando o valor 3.

Na primeira iteração do for, a variável *var* assume o valor 2 e dessa forma o valor de x é atualizado para 3 + 2 = 5.

Na segunda iteração, var assume o valor 3 e assim o valor de x é atualizado para 5 + 3 = 8 e assim por diante até que x passa a assumir o valor 17.

